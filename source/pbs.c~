/*
 * pbs.c
 *
 *  Created on: Sep 26, 2016
 *      Author: ajsebastian
 */

#include <stdio.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/shm.h>
#include <sys/ipc.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>
#include <ctype.h>
#include "helperFunctions.h"
#include "fatSupport.h"

typedef struct bootsect
{
	unsigned char Name[8];
	int BytesPerSector;
	int SectorsPerCluster;
	int NumOfFats;
	int NumReserved;
	int NumRoot;
	int SectCount;
	int SectorsPerFat;
	int SectorsPerTrack;
	int NumHeads;
	int BootSig;
	long int VolumeId;
	char* VolumeLabel;
	char* FileSysType;
	//boot sig in hex/ volume id in hex/ volume label and file system type


} __attribute__ ((packed)) bootsect_t;


FILE* FILE_SYSTEM_ID;
int BYTES_PER_SECTOR = 512;
unsigned char* FAT;
bootsect_t bootsector;
void readBootSector();

int main(int argc, char* argv[])
{
	if (argc > 1)
	{
		printf("Error too many arguments! \n");
	}
	FILE_SYSTEM_ID = fopen("floppy1", "r+");
	if (FILE_SYSTEM_ID == NULL)
	{
		printf("Could not open the floppy drive or image.\n");
		exit(1);
	}

	readBootSector();



	return 0;
}




void readBootSector()
{


	//finding total number of sectors
	unsigned char* buffer;
	buffer = malloc(BYTES_PER_SECTOR * sizeof(unsigned char));
	read_sector(0,buffer);
	int mostSigBits;
	int leastSigBits;
	int mostSigBits2;
	int leastSigBits2;
	bootsect_t bootsector;

	mostSigBits  = ( ( (int) buffer[12] ) << 8 ) & 0x0000ff00;
	leastSigBits =   ( (int) buffer[11] )        & 0x000000ff;
	mostSigBits2 = mostSigBits | leastSigBits;
	printf("Bytes per sector: %d \n", mostSigBits2);
	bootsector.NumOfFats =  buffer[16];
	printf("Number of fats: %d \n", bootsector.NumOfFats);
	bootsector.SectorsPerCluster = buffer[13];
	printf("Sectors per cluster: %d \n", bootsector.SectorsPerCluster);

	leastSigBits = buffer[14];
	mostSigBits = buffer[15];
	bootsector.NumReserved = mostSigBits | leastSigBits;
	printf("Number of reserved sectors: %d  \n", bootsector.NumReserved);

	leastSigBits = buffer[17];
	mostSigBits = buffer[18];
	bootsector.NumRoot = mostSigBits | leastSigBits;
	printf("Number of root directory entries: %d  \n", bootsector.NumRoot);

	int totalBlocks;
	int mostSig  = ( ( (int) buffer[20] ) << 8  ) & 0x0000ff00;
	int leastSig = ( (int) buffer[19] )        & 0x000000ff;
	totalBlocks = mostSig | leastSig;
	printf("Number of total Sectors: %d \n", totalBlocks);

	leastSigBits = buffer[22];
	mostSigBits = buffer[23];
	bootsector.SectorsPerFat = mostSigBits | leastSigBits;
	printf("Number of sectors per fat: %d  \n", bootsector.SectorsPerFat);

	leastSigBits = buffer[24];
	mostSigBits = buffer[25];
	bootsector.SectorsPerTrack = mostSigBits | leastSigBits;
	printf("Number of sectors per Track: %d  \n", bootsector.SectorsPerTrack);


	leastSigBits = buffer[26];
	mostSigBits = buffer[27];
	bootsector.NumHeads= mostSigBits | leastSigBits;
	printf("Number of heads: %d  \n", bootsector.NumHeads);

	bootsector.BootSig = buffer[38];
	printf("Boot signature in hex: 0x%x \n", bootsector.BootSig);

	leastSigBits = buffer[39] ;
	leastSigBits2 = buffer[40] ;
	mostSigBits2 = buffer[41] ;
	mostSigBits = buffer[42] ;

	bootsector.VolumeId = mostSigBits | mostSigBits2 | leastSigBits2 | leastSigBits << 24;
	printf("Volume ID in hex: 0x%x \n",bootsector.VolumeId);



}
